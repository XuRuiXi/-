/*
  负数在内存中的二进制码是补码

  例如：求-5的二进制码
  1. 先求5的二进制码：101
  2. 求5的反码：010
  3. 求5的补码（反码+1）：011
  所以：-5的二进制码：11111111111111111111111111111011
*/


/*
  二进制如何表示小数
  
  例如：0.6
  方法：乘2取整，直到小数为0
  0.6 * 2 = 1.2 => 1
  0.2 * 2 = 0.4 => 0
  0.4 * 2 = 0.8 => 0
  0.8 * 2 = 1.6 => 1
  0.6 * 2 = 1.2 => 1
  0.2 * 2 = 0.4 => 0
  0.4 * 2 = 0.8 => 0
  0.8 * 2 = 1.6 => 1
  ...

  此时，0.6是一个无限循环小数，二进制码为：0b0.1001100110011001100110011001100110011001100110011001...

  拓展：0.1 + 0.2 = 0.30000000000000004
  0.1的二进制码：0b0.0001100110011001100110011001100110011001100110011001...
  0.2的二进制码：0b0.0011001100110011001100110011001100110011001100110011...
  0.1 + 0.2的二进制码：0b0.0100110011001100110011001100110011001100110011001100...
  0.1 + 0.2的十进制码：0.30000000000000004
*/


/* 
二进制操作符
&：按位与，两个位都为1时，结果才为1                                         => 0b100 & 0b110 => 0b100
|：按位或，两个位只要有一个为1，结果就为1                                    => 0b100 | 0b110 => 0b110
^：按位异或，两个位不一样时，结果为1                                         => 0b100 ^ 0b110 => 0b010
~：按位非，0变1，1变0                                                       => ~0b100 => 0b11111111111111111111111111111011
<<：左移，将一个数的二进制码整体左移若干位，高位丢弃，低位补0                  => 0b100 << 2 => 0b10000
>>：右移，将一个数的二进制码整体右移若干位，对正数，高位补0，对负数，高位补1    => 0b100 >> 2 => 0b1
>>>：无符号右移，将一个数的二进制码整体右移若干位，高位补0                     => 0b100 >>> 2 => 0b1
*/


const read = 0b100; // 读的权限
const write = 0b010; // 写的权限
const execute = 0b001; // 执行的权限

/* 位移运算 */
// 正数
console.log((read << 2).toString(2)); // 0b10000
console.log((read >> 2).toString(2)); // 0b1
console.log((read >>> 2).toString(2)); // 0b1

// 负数
const minusFive = -5; // -5在内存中的二进制码为：11111111111111111111111111111011
console.log(minusFive << 2); // 11111111111111111111111111101100 => -20
console.log((minusFive >> 2)); // 11111111111111111111111111111110 => -2
console.log(minusFive >>> 2); // 00111111111111111111111111111110 => 1073741822



/* 权限控制*/

// 给某个用户添加权限
// 读写执行，此时readWriteExecute变为：0b111
const readWriteExecute = read | write | execute;

/* 判断是否拥有某个权限 */
// 0b100
const hasRead = (readWriteExecute & read) === read;
// 0b010
const hasWrite = (readWriteExecute & write) === write;
// 0b001
const hasExecute = (readWriteExecute & execute) === execute;

/* 删除某个权限 */
// 0b110
const readWrite = readWriteExecute & ~execute;
// 0b101
const readExecute = readWriteExecute & ~write;
// 0b011
const writeExecute = readWriteExecute & ~read;
